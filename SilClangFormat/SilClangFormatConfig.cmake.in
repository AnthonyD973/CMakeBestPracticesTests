# SPDX-License-Identifier: MIT

# Configure package file for this CMake package.
#
# Find this package with find_dependency(<pkg> CONFIG REQUIRED).

# If this module has a dependency, this other module defines the
# find_dependency() macro for that purpose.
include(CMakeFindDependencyMacro)

# Internal function; do not use.
function(__sil_clang_format_target tgt tgt_clang_format command_or_empty main_target_or_empty)
  if(NOT TARGET "${tgt}")
	message(FATAL_ERROR "Target \"${tgt}\" does not exist")
  endif()

  if(TARGET "${tgt_clang_format}")
	message(FATAL_ERROR
	  "Cannot create target \"${tgt_clang_format}\" for clang-format: A "
	  "target with the same name already exists. Use the "
	  "SIL_CLANG_FORMAT_MAIN_TARGET CMake variable to specify a different"
	  "target.")
  endif()

  get_target_property(tgt_sources "${tgt}" SOURCES)

  message(VERBOSE "Creating target ${tgt_clang_format}.")
  if(NOT "${tgt_sources}" STREQUAL "" AND
	  NOT "${command_or_empty}" STREQUAL "")
	add_custom_target("${tgt_clang_format}"
	  COMMENT "Running clang-format for target ${tgt}..."
	  COMMAND ${command_or_empty} -i ${tgt_sources})
  elseif(NOT "${tgt_sources}" STREQUAL "")
	add_custom_target("${tgt_clang_format}"
	  COMMAND echo "Not running clang-format for target ${tgt}: No sources")
  else()
	# If no command is specified, then this target should do nothing. The
	# reasons for this choice:
	#
	# 1) To avoid users of this CMake package having to do something like
	# "If we're one the CI machine, then call sil_clang_format, otherwise do
	# nothing." This sort of thing would be messy and error-prone, because it
	# forces having specific configurations for the CI machine inside the
	# CMakeLists.txt, which should generally remain declarative and focus
	# mostly just on describing project structure and install package
	# structure. Instead, CI configs and dev configs for the CMake project
	# should be controlled externally to the CMake project, e.g. via the
	# CMakePresets.json file, via some CMake cache variable specified on the
	# commandline, or via an environment variable. To be fair, if we do not
	# need to call clang-format (e.g. non-dev, non-CI environment), then the
	# calling CMakeLists.txt might try not to attempt finding this package so
	# that these setups don't need this package installed. But still, we should
	# not make that decision here. Let's leave that decision to whoever uses
	# us; they know their setup better than we do.
	#
	# 2) To remain consistent with CMake's clang-tidy integration, where if you
	# don't define the CMAKE_<lang>_CLANG_TIDY variable nor the
	# <lang>_CLANG_TIDY target property, then clang-tidy is not run.
	add_custom_target("${tgt_clang_format}"
	  COMMAND echo "Not running clang-format for target ${tgt}: no command specified.")
  endif()

  if(NOT "${main_target_or_empty}" STREQUAL "")
	if (NOT TARGET "${main_target_or_empty}")
	  add_custom_target("${main_target_or_empty}"
		COMMENT "Running clang-format sub-targets.")
	  message(VERBOSE "Creating target ${main_target_or_empty} and adding ${tgt_clang_format} as a dependency.")
	else()
	  	  message(VERBOSE "Adding ${tgt_clang_format} as a dependency of ${main_target_or_empty}.")
	endif()
	add_dependencies("${main_target_or_empty}" "${tgt_clang_format}")
  endif()
endfunction()

function(sil_clang_format_targets)
  message(VERBOSE "sil_clang_format_targets(): Parsing arguments.")
  ####
  #
  # TL;DR: This is an explanation on how to pass arguments to CMake functions.
  # For literal strings, if they don't contain whitespaces or
  # semicolons, then you *may* use the my_string syntax, otherwise use the
  # "my_string" syntax. For variable expansion, if you want to expand a
  # variable containing a list into zero or more function arguments, then do
  # the variable expansion outside of any quotes ${like_this}. Otherwise, do
  # the variable expansion inside quotes "${like_this}".
  #
  ####
  #
  # Most of this CMake package needs to handle variables and strings that may
  # have whitespaces, as well as lists. To explain how supporting that works,
  # let's have a FULL explanation of CMake lists, strings and variable
  # expansion.
  #
  # According to experimentation, there are 3 cases:
  #
  # 1) Quoted strings ("like \t \n ; this") are ALWAYS considered a single
  # unmodified argument, whether the string contains whitespaces, semicolons
  # or is an empty string. If a variable is expanded inside quotes
  # ("${like_this}"), the expansion is literally replaced by the contents of
  # the variable to produce the string, even if the variable is a list. By the
  # way, in CMake a list is a semicolon-separated string. So:
  #     set(my_list a " b " "c ;d")
  # ...produces a list variable of four-elements: "a; b ;c ;d".
  #
  # 2) Unquoted string literal: Begins and ends in first non-whitespace,
  # non-semicolon character. E.g.:
  #     HELLO  \t\n  WORLD;! ; \ \; ; ?;;;;
  # ...is considered to be five arguments, the same as if we had written:
  #     "HELLO" "WORLD" "!" " ;" "?"
  # Because this is really weird, for clarity and to avoid bugs it's advisable
  # to quote literal strings unless what happens is obvious.
  #
  # 3) Unquoted variable expansion: This is the variable expansion to use if
  # you want to expand a list in a situation where you want one argument per list
  # item. E.g.:
  #     set(my_list qwer "as  df ;  z\n xc\tv")
  # Any unquoted variable expansion is considered to be a special situation
  # where the variable is considered to be a list, with each item separated by
  # a semicolon. Therefore this:
  #     ${my_list}
  # ...expands to three arguments, as if we had written:
  #     "qwer" "as  df " "  z\n xc\tv"
  #
  # WARNING: You *cannot* always use unquoted variable expansion. For example:
  #     if(${my_list} STREQUAL "")
  # ...when my_list is empty will expand to:
  #     if(STREQUAL "")
  # ...which will cause a CMake error.

  # For a quick explanation of cmake_parse_arguments(), see:
  # https://youtu.be/IZXNsim9TWI?t=1618
  cmake_parse_arguments(
	parsed                # Magic var prefix

	""                    # Options

	# Here we want an actual single argument containing semicolons, since this
	# is what cmake_parse_arguments() expects as this argument.
	"MAIN_TARGET;POSTFIX" # Single-value keywords

	# Same here
	"TARGETS;COMMAND"     # Multi-value keywords

	# Here we want to pass one argument per list item of ARGN, which is the
	# list of arguments passed to *this* function. So this variable expansion
	# must not be inside a quoted string.
	${ARGN})

  if(parsed_UNPARSED_ARGUMENTS)
	message(FATAL_ERROR
	  "Unrecognized argument(s): ${parsed_UNPARSED_ARGUMENTS}.")
  endif()

  if(NOT DEFINED parsed_TARGETS)
	message(FATAL_ERROR "TARGETS keyword missing.")
  endif()

  if(NOT DEFINED parsed_POSTFIX)
	message(FATAL_ERROR "POSTFIX keyword missing.")
  endif()

  if(DEFINED parsed_COMMAND)
	set(COMMAND_OR_EMPTY ${parsed_COMMAND})
  elseif(DEFINED SIL_CLANG_FORMAT)
	set(COMMAND_OR_EMPTY ${SIL_CLANG_FORMAT})
  else()
	message(VERBOSE
	  "sil_clang_format_targets(): COMMAND keyword missing and "
	  "SIL_CLANG_FORMAT is undefined; clang-format will not be run on "
	  "specified target(s) \"${parsed_TARGETS}\".")

	set(COMMAND_OR_EMPTY)
  endif()

  if(DEFINED parsed_MAIN_TARGET)
	set(MAIN_TARGET ${parsed_MAIN_TARGET})
  elseif(DEFINED SIL_CLANG_FORMAT_MAIN_TARGET)
	set(MAIN_TARGET ${SIL_CLANG_FORMAT_MAIN_TARGET})
  else()
	set(MAIN_TARGET clang-format)
  endif()

  foreach(tgt IN LISTS parsed_TARGETS)
	set(clang_format_tgt "${tgt}-${parsed_POSTFIX}")

	__sil_clang_format_target(
	  "${tgt}"
	  "${clang_format_tgt}"
	  "${COMMAND_OR_EMPTY}"
	  "${MAIN_TARGET}")
  endforeach()
endfunction()

