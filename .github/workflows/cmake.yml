name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Environment variables used by CMake.
  # See: https://cmake.org/cmake/help/latest/manual/cmake-env-variables.7.html
  #
  # For multi-config generators (e.g. "Visual Studio *"), the CMAKE_BUILD_TYPE
  # environement variable does nothing; we'll specify
  # --config "${CMAKE_BUILD_TYPE}" to the commands instead, so you can still
  # use this environement variable for them.
  CMAKE_BUILD_TYPE: Release
  VERBOSE: ON

jobs:
  ninja:
    strategy:
      matrix:
        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#choosing-github-hosted-runners
        runner-id: [ubuntu-latest, macos-latest, windows-latest]
        lib1-workflow: [static, shared]
        exe-lib2-workflow: [static, shared]
        has-analysis: [false]

        # Remove the configuration "ubuntu-latest, static, static", and replace
        # that with the configuration "ubuntu-latest, static-dev, static-dev".
        # This means that the static analysis and format-checking tools won't
        # be run on every build, since only the *-dev CMake workflows
        # call them. This has the effect of 1) making the CI run a little
        # faster, 2) makes failures in the static checkers not be shown on
        # every job that has had time to build up to that point before being
        # stopped, 3) allows us to not kill the whole CI workflow if only
        # the static checkers failed (so that whoever committed the code can
        # still see whether the other jobs pass build, test and install
        # regardless of static checkers), and 4) means we don't *have* to setup
        # the analysis tools for all CI runners.

        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategymatrixinclude
        exclude:
          - runner-id: ubuntu-latest
            lib1-workflow: static
            exe-lib2-workflow: static
            has-analysis: false

          # Don't do (shared, static) CI jobs --if the others work then there's
          # a good chance that one will too.
          - lib1-workflow: shared
            exe-lib2-workflow: static

        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategymatrixinclude
        include:
          - runner-id: ubuntu-latest
            lib1-workflow: static-dev
            exe-lib2-workflow: static-dev
            has-analysis: true

          # Use different CPack generators depending on the runner.
          - runner-id: ubuntu-latest
            cpack-generators: "DEB;RPM;External;STGZ;TGZ;ZIP"
          - runner-id: macos-latest
            cpack-generators: "DragNDrop;productbuild;External;STGZ;TGZ;ZIP"
          - runner-id: windows-latest
            cpack-generators: "NSIS64;WIX;External;STGZ;TGZ;ZIP"

    env:
      # Environment variables used by CMake.
      # See: https://cmake.org/cmake/help/latest/manual/cmake-env-variables.7.html
      CMAKE_GENERATOR: Ninja

    runs-on: ${{matrix.runner-id}}
    continue-on-error: ${{matrix.has-analysis}}

    steps:
    - name: Ubuntu install ninja
      working-directory: ${{github.workspace}}
      if: matrix.runner-id == 'ubuntu-latest'
      run: |
        wget https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-linux.zip && \
        unzip ninja-linux.zip && rm ninja-linux.zip && \
        echo "${{github.workspace}}" >> $GITHUB_PATH

    - name: Windows install ninja
      working-directory: ${{github.workspace}}
      if: matrix.runner-id == 'windows-latest'
      run: |
        (new-object System.Net.WebClient).DownloadFile('https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-win.zip','${{github.workspace}}\ninja-win.zip');
        tar -xf ninja-win.zip;
        echo "${{github.workspace}}" >> $GITHUB_PATH

    - name: MacOS install ninja
      if: matrix.runner-id == 'macos-latest'
      working-directory: ${{github.workspace}}
      run: |
        wget https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-mac.zip && \
        unzip ninja-mac.zip && rm ninja-mac.zip && \
        echo "${{github.workspace}}" >> $GITHUB_PATH

    - name: MacOS brew packages setup
      if: matrix.runner-id == 'macos-latest'
      working-directory: ${{github.workspace}}
      run: |
        # Needed when vcpkg installs GTest
        brew install pkg-config

    - name: MacOS clang-tidy && clang-format setup
      if: matrix.runner-id == 'macos-latest' && matrix.has-analysis == 'true'
      working-directory: ${{github.workspace}}
      # https://stackoverflow.com/a/53380855/2252948
      run: |
        brew install llvm &&                                  \
        echo "LLVM Brew prefix: $(brew --prefix llvm)" &&     \
        echo "ls -l $(brew --prefix llvm):" &&                \
        ls -l "$(brew --prefix llvm)" &&                      \
        echo "ls -l $(brew --prefix llvm)/bin:" &&            \
        ls -l "$(brew --prefix llvm)/bin" &&                  \
        echo "Adding $(brew --prefix llvm)/bin to PATH" &&    \
        echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH

    - uses: actions/checkout@v3
      with:
        # The actions/checkout@v3 action clones into
        # "${{github.workspace}}" by default, which wipes the ninja executable we just extracted.
        path: repo
        # Also clone submodules, recursively (like
        # 'git submodule update --init --recursive')
        submodules: recursive

    - name: Unix Setup Vcpkg
      if: matrix.runner-id == 'macos-latest' || matrix.runner-id == 'ubuntu-latest'
      working-directory: ${{github.workspace}}/repo
      run: |
        ./vcpkg/bootstrap-vcpkg.sh && \
        ./vcpkg/vcpkg install

    - name: Windows Setup Vcpkg
      if: matrix.runner-id == 'windows-latest'
      working-directory: ${{github.workspace}}/repo
      run: |
        cmd /c vcpkg\bootstrap-vcpkg.bat && `
        vcpkg\vcpkg install

    - name: AdeClangFormat/Workflow
      working-directory: ${{github.workspace}}/repo/AdeClangFormat
      run: cmake --workflow --preset default

    - name: AdeClangFormat/CPack
      working-directory: ${{github.workspace}}/repo/AdeClangFormat
      run: cpack -B build -G "${{matrix.cpack-generators}}" --config build/CPackConfig.cmake

    - name: AdeClangFormat/Install
      working-directory: ${{github.workspace}}/repo/AdeClangFormat
      run: cmake --install build

    - name: lib1/Workflow
      working-directory: ${{github.workspace}}/repo/lib1
      run: cmake --workflow --preset "${{matrix.lib1-workflow}}"

    - name: lib1/CPack
      working-directory: ${{github.workspace}}/repo/lib1
      run: cpack -B build -G "${{matrix.cpack-generators}}" --config build/CPackConfig.cmake

    - name: lib1/Install
      working-directory: ${{github.workspace}}/repo/lib1
      run: cmake --install build

    - name: exe-and-lib2/Workflow
      working-directory: ${{github.workspace}}/repo/exe-and-lib2
      run: cmake --workflow --preset "${{matrix.exe-lib2-workflow}}"

    - name: exe-and-lib2/CPack
      working-directory: ${{github.workspace}}/repo/exe-and-lib2
      run: cpack -B build -G "${{matrix.cpack-generators}}" --config build/CPackConfig.cmake

    - name: exe-and-lib2/Install
      working-directory: ${{github.workspace}}/repo/exe-and-lib2
      run: cmake --install build

    - name: Run exe
      run: ${{github.workspace}}/repo/install/bin/exe

  vs:
    strategy:
      matrix:
        generator: ["Visual Studio 17 2022"]
        lib1-build-shared-libs: [ON, OFF]
        exe-lib2-build-shared-libs: [ON, OFF]

        exclude:
          # Don't do (shared, static) CI jobs --if the others work then there's
          # a good chance that one will too.
          - lib1-build-shared-libs: ON
            exe-lib2-build-shared-libs: OFF

    runs-on: windows-latest

    env:
      # Environment variables used by CMake.
      # See: https://cmake.org/cmake/help/latest/manual/cmake-env-variables.7.html
      CMAKE_GENERATOR: ${{matrix.generator}}

    steps:
    - uses: actions/checkout@v3
      with:
        # To remain consistent with the 'ninja' jobs.
        path: repo
        # Also clone submodules, recursively (like
        # 'git submodule update --init --recursive')
        submodules: recursive

    - name: Windows Setup Vcpkg
      working-directory: ${{github.workspace}}/repo
      run: |
        cmd /c vcpkg\bootstrap-vcpkg.bat && `
        vcpkg\vcpkg install

    - name: AdeClangFormat/Workflow
      working-directory: ${{github.workspace}}/repo/AdeClangFormat
      run: |
        cmake -S . -B build &&                                                `
        cmake --build build --config "${env:CMAKE_BUILD_TYPE}" -j10 &&        `
        ctest --test-dir build --build-config "${env:CMAKE_BUILD_TYPE}" -j10

    - name: AdeClangFormat/Install
      working-directory: ${{github.workspace}}/repo/AdeClangFormat
      run: cmake --install build --config "${env:CMAKE_BUILD_TYPE}"

    - name: lib1/Workflow
      working-directory: ${{github.workspace}}/repo/lib1
      run: |
        cmake -S . -B build                                                   `
            -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/repo/install"       `
            -DBUILD_SHARED_LIBS="${{matrix.lib1-build-shared-libs}}"          `
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON                                `
            -Dlib1_BUILD_WITH_PIC=ON &&                                       `
        cmake --build build --config "${env:CMAKE_BUILD_TYPE}" -j10 &&        `
        ctest --test-dir build --build-config "${env:CMAKE_BUILD_TYPE}" -j10

    - name: lib1/Install
      working-directory: ${{github.workspace}}/repo/lib1
      run: cmake --install build --config "${env:CMAKE_BUILD_TYPE}"

    - name: exe-and-lib2/Workflow
      working-directory: ${{github.workspace}}/repo/exe-and-lib2
      run: |
        cmake -S . -B build                                                   `
            -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/repo/install"       `
            -DBUILD_SHARED_LIBS="${{matrix.exe-lib2-build-shared-libs}}"      `
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON                                `
            -Dlib2_BUILD_WITH_PIC=ON &&                                       `
        cmake --build build --config "${env:CMAKE_BUILD_TYPE}" -j10 &&        `
        ctest --test-dir build --build-config "${env:CMAKE_BUILD_TYPE}" -j10

    - name: exe-and-lib2/Install
      working-directory: ${{github.workspace}}/repo/exe-and-lib2
      run: cmake --install build --config "${env:CMAKE_BUILD_TYPE}"

    - name: Run exe
      run: ${{github.workspace}}/repo/install/bin/exe

