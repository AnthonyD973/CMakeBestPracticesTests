name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Environment variables used by CMake.
  # See: https://cmake.org/cmake/help/latest/envvar/CMAKE_GENERATOR.html
  CMAKE_BUILD_TYPE: Release
  VERBOSE: ON

jobs:
  ninja:
    strategy:
      matrix:
        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#choosing-github-hosted-runners
        runner-id: [macos-latest, ubuntu-latest, windows-latest]
        lib1-workflow: [static, shared]
        exe-lib2-workflow: [static, shared]
        is-analysis: [false]

        # Remove the configuration "ubuntu-latest, static, static", and replace
        # that with the configuration "ubuntu-latest, static-dev, static-dev".
        # This means that the static analysis and format-checking tools won't
        # be run on every build, since only the *-dev CMake workflows
        # call them. This has the effect of 1) making the CI run a little
        # faster, 2) makes failures in the static checkers not be shown on
        # every job that has had time to build up to that point before being
        # stopped, 3) allows us to not kill the whole CI workflow if only
        # the static checkers failed (so that whoever committed the code can
        # still see whether the other jobs pass build, test and install
        # regardless of static checkers), and 4) means we don't *have* to setup
        # the analysis tools for all CI runners.

        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategymatrixinclude
        exclude:
          - runner-id: ubuntu-latest
            lib1-workflow: static
            exe-lib2-workflow: static
            is-analysis: false

        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategymatrixinclude
        include:
          - runner-id: ubuntu-latest
            lib1-workflow: static-dev
            exe-lib2-workflow: static-dev
            is-analysis: true

    env:
      # Environment variables used by CMake.
      # See: https://cmake.org/cmake/help/latest/envvar/CMAKE_GENERATOR.html
      CMAKE_GENERATOR: Ninja

    runs-on: ${{matrix.runner-id}}
    continue-on-error: ${{matrix.is-analysis}}

    steps:
    - name: Ubuntu install ninja
      working-directory: ${{github.workspace}}
      if: matrix.runner-id == 'ubuntu-latest'
      run: |
        wget https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-linux.zip && \
        unzip ninja-linux.zip && rm ninja-linux.zip && \
        echo "${{github.workspace}}" >> $GITHUB_PATH

    - name: Windows install ninja
      working-directory: ${{github.workspace}}
      if: matrix.runner-id == 'windows-latest'
      run: |
        (new-object System.Net.WebClient).DownloadFile('https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-win.zip','${{github.workspace}}\ninja-win.zip');
        tar -xf ninja-win.zip;
        echo "${{github.workspace}}" >> $GITHUB_PATH

    - name: MacOS install ninja
      if: matrix.runner-id == 'macos-latest'
      working-directory: ${{github.workspace}}
      run: |
        wget https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-mac.zip && \
        unzip ninja-mac.zip && rm ninja-mac.zip && \
        echo "${{github.workspace}}" >> $GITHUB_PATH

    - name: MacOS setup clang-tidy & clang-format
      if: matrix.runner-id == 'macos-latest' && matrix.is-analysis == 'true'
      working-directory: ${{github.workspace}}
      # https://stackoverflow.com/a/53380855/2252948
      run: |
        brew install llvm && \
        echo "LLVM Brew prefix: $(brew --prefix llvm)" && \
        echo "ls -l $(brew --prefix llvm):" && \
        ls -l "$(brew --prefix llvm)" && \
        echo "ls -l $(brew --prefix llvm)/bin:" && \
        ls -l "$(brew --prefix llvm)/bin" && \
        echo "Adding $(brew --prefix llvm)/bin to PATH" && \
        echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH

    - uses: actions/checkout@v3
      with:
        # The actions/checkout@v3 action clones into
        # "${{github.workspace}}" by default, which wipes the ninja executable we just extracted.
        path: repo

    - name: AdeClangFormat/Workflow
      working-directory: ${{github.workspace}}/repo/AdeClangFormat
      run: cmake --workflow --preset default

    - name: AdeClangFormat/Install
      working-directory: ${{github.workspace}}/repo/AdeClangFormat/build
      run: cmake --install .

    - name: lib1/Workflow
      working-directory: ${{github.workspace}}/repo/lib1
      run: cmake --workflow --preset "${{matrix.lib1-workflow}}"

    - name: lib1/Install
      working-directory: ${{github.workspace}}/repo/lib1/build
      run: cmake --install .

    - name: exe-and-lib2/Workflow
      working-directory: ${{github.workspace}}/repo/exe-and-lib2
      run: cmake --workflow --preset "${{matrix.exe-lib2-workflow}}"

    - name: exe-and-lib2/Install
      working-directory: ${{github.workspace}}/repo/exe-and-lib2/build
      run: cmake --install .

    - name: Run exe
      run: ${{github.workspace}}/repo/install/bin/exe

